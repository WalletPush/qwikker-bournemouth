// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin" | "/admin/ai-test" | "/admin/debug" | "/admin/franchise-setup" | "/admin/login" | "/admin/monitoring" | "/admin/utils/cleanup-auth" | "/admin/utils/create-test-profile" | "/admin/utils/debug-users" | "/admin/utils/delete-orphaned-users" | "/admin/utils/init-mock-user" | "/admin/utils/reset-david" | "/admin/wallet-pass-update" | "/auth/error" | "/auth/forgot-password" | "/auth/login" | "/auth/sign-up" | "/auth/sign-up-success" | "/auth/update-password" | "/business" | "/business/dashboard" | "/coming-soon" | "/dashboard" | "/dashboard/action-items" | "/dashboard/analytics" | "/dashboard/business" | "/dashboard/files" | "/dashboard/loyalty" | "/dashboard/notifications" | "/dashboard/offers" | "/dashboard/personal" | "/dashboard/referrals" | "/dashboard/secret-menu" | "/dashboard/settings" | "/dashboard/support" | "/debug-supabase" | "/embed/chat" | "/intent" | "/intent/[...params]" | "/intent/[code]" | "/offline" | "/onboarding" | "/onboarding/success" | "/phase2-gate" | "/protected" | "/simulate-wallet-pass" | "/test-ai" | "/test-qr-scroll" | "/user" | "/user/business/[slug]" | "/user/chat" | "/user/credits" | "/user/dashboard" | "/user/discover" | "/user/how-it-works" | "/user/offers" | "/user/secret-menu" | "/user/settings" | "/wallet-pass/[id]"
type AppRouteHandlerRoutes = "/api/admin/analytics" | "/api/admin/approve" | "/api/admin/approve-business" | "/api/admin/approve-change" | "/api/admin/contacts" | "/api/admin/contacts/bulk-sync-ghl" | "/api/admin/contacts/simple-update" | "/api/admin/contacts/sync-ghl" | "/api/admin/contacts/update" | "/api/admin/franchise" | "/api/admin/login" | "/api/admin/logout" | "/api/admin/sync/bulk-sync" | "/api/admin/sync/force-sync" | "/api/admin/sync/health" | "/api/admin/update-notes" | "/api/dashboard/ai-support" | "/api/franchise/crm-sync" | "/api/ghl-webhook/user-creation" | "/api/push/send" | "/api/push/subscribe" | "/api/push/unsubscribe" | "/api/qr/track" | "/api/test-contact-update" | "/api/wallet/create-offer-pass" | "/api/wallet/update-existing-passes" | "/api/walletpass/user-creation" | "/auth/confirm" | "/auth/logout"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin": {}
  "/admin/ai-test": {}
  "/admin/debug": {}
  "/admin/franchise-setup": {}
  "/admin/login": {}
  "/admin/monitoring": {}
  "/admin/utils/cleanup-auth": {}
  "/admin/utils/create-test-profile": {}
  "/admin/utils/debug-users": {}
  "/admin/utils/delete-orphaned-users": {}
  "/admin/utils/init-mock-user": {}
  "/admin/utils/reset-david": {}
  "/admin/wallet-pass-update": {}
  "/api/admin/analytics": {}
  "/api/admin/approve": {}
  "/api/admin/approve-business": {}
  "/api/admin/approve-change": {}
  "/api/admin/contacts": {}
  "/api/admin/contacts/bulk-sync-ghl": {}
  "/api/admin/contacts/simple-update": {}
  "/api/admin/contacts/sync-ghl": {}
  "/api/admin/contacts/update": {}
  "/api/admin/franchise": {}
  "/api/admin/login": {}
  "/api/admin/logout": {}
  "/api/admin/sync/bulk-sync": {}
  "/api/admin/sync/force-sync": {}
  "/api/admin/sync/health": {}
  "/api/admin/update-notes": {}
  "/api/dashboard/ai-support": {}
  "/api/franchise/crm-sync": {}
  "/api/ghl-webhook/user-creation": {}
  "/api/push/send": {}
  "/api/push/subscribe": {}
  "/api/push/unsubscribe": {}
  "/api/qr/track": {}
  "/api/test-contact-update": {}
  "/api/wallet/create-offer-pass": {}
  "/api/wallet/update-existing-passes": {}
  "/api/walletpass/user-creation": {}
  "/auth/confirm": {}
  "/auth/error": {}
  "/auth/forgot-password": {}
  "/auth/login": {}
  "/auth/logout": {}
  "/auth/sign-up": {}
  "/auth/sign-up-success": {}
  "/auth/update-password": {}
  "/business": {}
  "/business/dashboard": {}
  "/coming-soon": {}
  "/dashboard": {}
  "/dashboard/action-items": {}
  "/dashboard/analytics": {}
  "/dashboard/business": {}
  "/dashboard/files": {}
  "/dashboard/loyalty": {}
  "/dashboard/notifications": {}
  "/dashboard/offers": {}
  "/dashboard/personal": {}
  "/dashboard/referrals": {}
  "/dashboard/secret-menu": {}
  "/dashboard/settings": {}
  "/dashboard/support": {}
  "/debug-supabase": {}
  "/embed/chat": {}
  "/intent": {}
  "/intent/[...params]": { "params": string[]; }
  "/intent/[code]": { "code": string; }
  "/offline": {}
  "/onboarding": {}
  "/onboarding/success": {}
  "/phase2-gate": {}
  "/protected": {}
  "/simulate-wallet-pass": {}
  "/test-ai": {}
  "/test-qr-scroll": {}
  "/user": {}
  "/user/business/[slug]": { "slug": string; }
  "/user/chat": {}
  "/user/credits": {}
  "/user/dashboard": {}
  "/user/discover": {}
  "/user/how-it-works": {}
  "/user/offers": {}
  "/user/secret-menu": {}
  "/user/settings": {}
  "/wallet-pass/[id]": { "id": string; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
