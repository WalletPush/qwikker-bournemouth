{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file:///Users/qwikker/qwikkerdashboard/lib/actions/signup-actions.ts"],"sourcesContent":["'use server'\n\nimport { createAdminClient } from '@/lib/supabase/admin'\nimport { uploadToCloudinary } from '@/lib/integrations'\n// import { sendWelcomeEmail } from '@/lib/email/send-welcome-email' // Disabled until domain verification\n\ninterface SignupData {\n  // Personal info\n  firstName: string\n  lastName: string\n  email: string\n  phone: string\n  password: string\n  \n  // Business info\n  businessName: string\n  businessType: string\n  businessCategory: string\n  businessAddress: string\n  town: string\n  postcode: string\n  \n  // Optional fields\n  website?: string\n  instagram?: string\n  facebook?: string\n  \n  // Offer data\n  offerName?: string\n  offerType?: string\n  offerValue?: string\n  claimAmount?: string\n  startDate?: string\n  endDate?: string\n  terms?: string\n  \n  // Other\n  referralSource?: string\n  notes?: string\n}\n\nexport async function createUserAndProfile(formData: SignupData, files: { logo?: File, menu?: File[], offer?: File }, referralCode?: string) {\n  const supabaseAdmin = createAdminClient()\n  \n  try {\n    // 1. Create user in auth.users using admin client\n    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\n      email: formData.email,\n      password: formData.password,\n      email_confirm: true, // Auto-confirm email so users can login immediately\n      user_metadata: {\n        first_name: formData.firstName,\n        last_name: formData.lastName,\n      }\n    })\n\n    if (authError || !authData.user) {\n      console.error('Auth user creation failed:', authError)\n      throw new Error(`Account creation failed: ${authError?.message || 'Unknown error'}`)\n    }\n\n    console.log('Auth user created:', authData.user.id)\n\n    // 2. Upload files to Cloudinary\n    let logoUrl = ''\n    let menuUrls: string[] = []\n    let offerImageUrl = ''\n\n    if (files.logo) {\n      logoUrl = await uploadToCloudinary(files.logo, 'qwikker/logos')\n    }\n    \n    if (files.menu && files.menu.length > 0) {\n      menuUrls = await Promise.all(\n        files.menu.map(file => uploadToCloudinary(file, 'qwikker/menus'))\n      )\n    }\n    \n    if (files.offer) {\n      offerImageUrl = await uploadToCloudinary(files.offer, 'qwikker/offers')\n    }\n\n    // 3. Prepare profile data\n    const normalizePhoneNumber = (phone: string): string => {\n      const cleaned = phone.trim()\n      if (cleaned.startsWith('0')) {\n        return '+44' + cleaned.slice(1)\n      }\n      return cleaned\n    }\n\n    const mapReferralSource = (source: string) => {\n      if (!source) return null\n      const mapping: Record<string, string> = {\n        'founding-member': 'partner_referral',\n        'business-referral': 'partner_referral', \n        'google-search': 'google_search',\n        'social-media': 'social_media',\n        'word-of-mouth': 'word_of_mouth',\n        'other': 'other'\n      }\n      return mapping[source] || 'other'\n    }\n\n    const mapGoals = (goals: string) => {\n      if (!goals || goals.trim() === '') return null\n      \n      // Map common phrases to database values\n      const lowerGoals = goals.toLowerCase()\n      if (lowerGoals.includes('customer') && (lowerGoals.includes('new') || lowerGoals.includes('more') || lowerGoals.includes('attract'))) {\n        return 'increase_customers'\n      }\n      if (lowerGoals.includes('marketing') || lowerGoals.includes('advertis') || lowerGoals.includes('promot')) {\n        return 'improve_marketing'\n      }\n      if (lowerGoals.includes('sales') || lowerGoals.includes('revenue') || lowerGoals.includes('income')) {\n        return 'boost_sales'\n      }\n      if (lowerGoals.includes('brand') || lowerGoals.includes('awareness') || lowerGoals.includes('recognition')) {\n        return 'build_brand_awareness'\n      }\n      if (lowerGoals.includes('retention') || lowerGoals.includes('keep') || lowerGoals.includes('loyal')) {\n        return 'customer_retention'\n      }\n      if (lowerGoals.includes('expand') || lowerGoals.includes('grow') || lowerGoals.includes('bigger')) {\n        return 'expand_business'\n      }\n      \n      // Default to 'other' for anything that doesn't match\n      return 'other'\n    }\n\n    const mapBusinessType = (type: string) => {\n      const mapping: Record<string, string> = {\n        'Restaurant': 'restaurant',\n        'Cafe/Coffee Shop': 'cafe',\n        'Bar/Pub': 'bar',\n        'Dessert/Ice Cream': 'restaurant', // closest match\n        'Takeaway/Street Food': 'restaurant',\n        'Salon/Spa': 'salon',\n        'Hairdresser/Barber': 'salon',\n        'Tattoo/Piercing': 'salon',\n        'Clothing/Fashion': 'retail_shop',\n        'Gift Shop': 'retail_shop',\n        'Fitness/Gym': 'gym',\n        'Sports/Outdoors': 'gym',\n        'Hotel/BnB': 'hotel',\n        'Venue/Event Space': 'hotel',\n        'Entertainment/Attractions': 'other',\n        'Professional Services': 'service_business',\n        'Other': 'other'\n      }\n      return mapping[type] || 'other'\n    }\n\n    const mapBusinessTown = (town: string) => {\n      const cleanTown = town.toLowerCase().trim()\n      const mapping: Record<string, string> = {\n        'bournemouth': 'bournemouth',\n        'poole': 'poole', \n        'christchurch': 'christchurch',\n        'wimborne': 'wimborne',\n        'ferndown': 'ferndown',\n        'ringwood': 'ringwood',\n        'new milton': 'new_milton',\n        'newmilton': 'new_milton'\n      }\n      return mapping[cleanTown] || 'other'\n    }\n\n    const mapOfferType = (type: string) => {\n      if (!type) return null\n      const mapping: Record<string, string> = {\n        'percentage': 'percentage_off',\n        'fixed': 'fixed_amount_off',\n        'bogo': 'two_for_one',\n        'free-item': 'freebie',\n        'bundle': 'other',\n        'other': 'other'\n      }\n      return mapping[type] || 'other'\n    }\n\n    const mapClaimAmount = (amount: string) => {\n      if (!amount) return null\n      const mapping: Record<string, string> = {\n        'first_10': 'first_10',\n        'first_25': 'first_25', \n        'first_50': 'first_50',\n        'first_100': 'first_100',\n        'unlimited': 'unlimited',\n        'custom': 'custom'\n      }\n      return mapping[amount] || 'unlimited'\n    }\n\n    const profileData = {\n      user_id: authData.user.id,\n      first_name: formData.firstName,\n      last_name: formData.lastName,\n      email: formData.email,\n      phone: normalizePhoneNumber(formData.phone),\n      business_name: formData.businessName,\n      business_type: mapBusinessType(formData.businessType),\n      business_category: formData.businessCategory,\n      business_address: formData.businessAddress,\n      business_town: mapBusinessTown(formData.town),\n      business_postcode: formData.postcode,\n      website_url: formData.website || null,\n      instagram_handle: formData.instagram || null,\n      facebook_url: formData.facebook || null,\n      logo: logoUrl || null,\n      offer_name: formData.offerName || null,\n      offer_type: mapOfferType(formData.offerType || ''),\n      offer_value: formData.offerValue || null,\n      offer_claim_amount: mapClaimAmount(formData.claimAmount || ''),\n      offer_start_date: formData.startDate || null,\n      offer_end_date: formData.endDate || null,\n      offer_terms: formData.terms || null,\n      offer_image: offerImageUrl || null,\n      referral_source: mapReferralSource(formData.referralSource || ''),\n      goals: mapGoals(formData.goals || ''),\n      notes: formData.notes || null,\n      plan: 'featured', // Free trial users get Featured plan access during 120-day trial\n      is_founder: new Date() < new Date('2025-12-31'),\n    }\n\n    // 4. Create profile\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('profiles')\n      .insert(profileData)\n      .select()\n      .single()\n\n    if (profileError) {\n      console.error('Profile creation failed:', profileError)\n      throw new Error(`Profile creation failed: ${profileError.message}`)\n    }\n\n    console.log('Profile created:', profile.id)\n\n    // 5. Track referral if provided\n    if (referralCode) {\n      try {\n        const { trackReferral } = await import('@/lib/actions/referral-actions')\n        await trackReferral(referralCode, authData.user.id)\n      } catch (error) {\n        console.error('Referral tracking failed (non-critical):', error)\n      }\n    }\n\n           // Send welcome email (disabled until domain verification)\n           // sendWelcomeEmail({\n           //   firstName: formData.firstName,\n           //   lastName: formData.lastName,\n           //   email: formData.email,\n           //   businessName: formData.businessName,\n           //   profile: profile\n           // }).catch(error => {\n           //   console.error('Welcome email failed (non-blocking):', error)\n           // })\n    \n    return {\n      success: true,\n      user: authData.user,\n      profile: profile\n    }\n\n  } catch (error) {\n    console.error('Signup process failed:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred'\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAyCsB,uBAAA,WAAA,GAAA,IAAA,iXAAA,EAAA,8CAAA,sWAAA,EAAA,KAAA,GAAA,4WAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/qwikker/qwikkerdashboard/node_modules/.pnpm/next%4015.5.3_react-dom%4019.1.0_react%4019.1.0__react%4019.1.0/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport { createServerReference } from 'react-server-dom-webpack/client'\n"],"names":["callServer","createServerReference","findSourceMapURL"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;;;;;;;;;;;;;;;;IAEjBA,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IAMVC,qBAAqB,EAAA;eAArBA,QAAAA,qBAAqB;;IALrBC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;wBAKK","ignoreList":[0],"debugId":null}}]
}