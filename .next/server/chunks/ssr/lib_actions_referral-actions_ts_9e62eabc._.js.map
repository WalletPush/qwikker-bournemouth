{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/qwikker/qwikkerdashboard/lib/actions/referral-actions.ts"],"sourcesContent":["'use server'\n\nimport { createAdminClient } from '@/lib/supabase/admin'\nimport { sendBusinessUpdateNotification } from '@/lib/integrations'\nimport { revalidatePath } from 'next/cache'\n\n/**\n * Track a referral when a new user signs up with a referral code\n */\nexport async function trackReferral(referralCode: string, newUserId: string) {\n  if (!referralCode || !newUserId) {\n    return { success: false, error: 'Missing referral code or user ID' }\n  }\n\n  const supabaseAdmin = createAdminClient()\n\n  try {\n    // Call the database function to track the referral\n    const { error } = await supabaseAdmin.rpc('track_referral', {\n      referral_code_param: referralCode,\n      new_user_id: newUserId\n    })\n\n    if (error) {\n      console.error('Error tracking referral:', error)\n      return { success: false, error: error.message }\n    }\n\n    // Get referrer profile for notification\n    const { data: referrerProfile } = await supabaseAdmin\n      .from('profiles')\n      .select('*')\n      .eq('referral_code', referralCode)\n      .single()\n\n    // Get new user profile\n    const { data: newUserProfile } = await supabaseAdmin\n      .from('profiles')\n      .select('*')\n      .eq('user_id', newUserId)\n      .single()\n\n    // Send Slack notification about new referral\n    if (referrerProfile && newUserProfile) {\n      try {\n        await sendBusinessUpdateNotification(referrerProfile, 'referral_signup', {\n          referredBusinessName: newUserProfile.business_name || 'New Business',\n          referredOwnerName: `${newUserProfile.first_name || ''} ${newUserProfile.last_name || ''}`.trim() || 'New User',\n          referralCode: referralCode\n        })\n      } catch (error) {\n        console.error('Slack notification failed (non-critical):', error)\n      }\n    }\n\n    revalidatePath('/dashboard')\n    revalidatePath('/dashboard/referrals')\n    return { success: true }\n\n  } catch (error) {\n    console.error('Error in trackReferral:', error)\n    return { success: false, error: 'Failed to track referral' }\n  }\n}\n\n/**\n * Get referral stats for dashboard\n */\nexport async function getReferralStats(userId: string) {\n  const supabaseAdmin = createAdminClient()\n\n  try {\n    // Get user's profile ID\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('id')\n      .eq('user_id', userId)\n      .single()\n\n    if (!profile) {\n      return { success: false, error: 'Profile not found' }\n    }\n\n    // Get referral stats\n    const { data: referrals, error } = await supabaseAdmin\n      .from('referrals')\n      .select('status, reward_amount')\n      .eq('referrer_id', profile.id)\n\n    if (error) {\n      return { success: false, error: error.message }\n    }\n\n    const totalReferrals = referrals?.length || 0\n    const successfulReferrals = referrals?.filter(r => r.status === 'approved' || r.status === 'credited').length || 0\n    const totalEarnings = referrals?.filter(r => r.status === 'credited').reduce((sum, r) => sum + (r.reward_amount || 0), 0) || 0\n\n    return { \n      success: true, \n      data: {\n        totalReferrals,\n        successfulReferrals,\n        totalEarnings\n      }\n    }\n\n  } catch (error) {\n    console.error('Error getting referral stats:', error)\n    return { success: false, error: 'Failed to get referral stats' }\n  }\n}\n\n/**\n * Get referrals for a user\n */\nexport async function getUserReferrals(userId: string) {\n  const supabaseAdmin = createAdminClient()\n\n  try {\n    // Get user's profile ID\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('id')\n      .eq('user_id', userId)\n      .single()\n\n    if (!profile) {\n      return { success: false, error: 'Profile not found' }\n    }\n\n    // Get referrals with referred user details\n    const { data: referrals, error } = await supabaseAdmin\n      .from('referrals')\n      .select(`\n        *,\n        referred:referred_id (\n          business_name,\n          first_name,\n          last_name\n        )\n      `)\n      .eq('referrer_id', profile.id)\n      .order('created_at', { ascending: false })\n\n    if (error) {\n      return { success: false, error: error.message }\n    }\n\n    return { success: true, data: referrals }\n\n  } catch (error) {\n    console.error('Error getting user referrals:', error)\n    return { success: false, error: 'Failed to get referrals' }\n  }\n}\n\n/**\n * Update referral status (for admin use)\n */\nexport async function updateReferralStatus(referralId: string, status: 'pending' | 'approved' | 'credited' | 'rejected') {\n  const supabaseAdmin = createAdminClient()\n\n  try {\n    const updateData: any = {\n      status,\n      updated_at: new Date().toISOString()\n    }\n\n    // If crediting, add credited_date\n    if (status === 'credited') {\n      updateData.credited_date = new Date().toISOString()\n    }\n\n    const { data, error } = await supabaseAdmin\n      .from('referrals')\n      .update(updateData)\n      .eq('id', referralId)\n      .select(`\n        *,\n        referrer:referrer_id (\n          business_name,\n          first_name,\n          last_name,\n          user_id\n        ),\n        referred:referred_id (\n          business_name,\n          first_name,\n          last_name\n        )\n      `)\n      .single()\n\n    if (error) {\n      return { success: false, error: error.message }\n    }\n\n    // Send notification if status changed to credited\n    if (status === 'credited' && data.referrer) {\n      try {\n        await sendBusinessUpdateNotification(data.referrer, 'referral_credited', {\n          referredBusinessName: data.referred?.business_name || 'Business',\n          rewardAmount: data.reward_amount,\n          currency: data.reward_currency\n        })\n      } catch (error) {\n        console.error('Slack notification failed (non-critical):', error)\n      }\n    }\n\n    revalidatePath('/dashboard/referrals')\n    return { success: true, data }\n\n  } catch (error) {\n    console.error('Error updating referral status:', error)\n    return { success: false, error: 'Failed to update referral status' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}