{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///Users/qwikker/qwikkerdashboard/lib/actions/file-actions.ts"],"sourcesContent":["'use server'\n\nimport { createAdminClient } from '@/lib/supabase/admin'\nimport { revalidatePath } from 'next/cache'\nimport { sendFileUpdateToGoHighLevel, sendBusinessUpdateNotification } from '@/lib/integrations'\n\nexport async function updateProfileFile(userId: string, fileType: 'logo' | 'menu' | 'offer', fileUrl: string) {\n  const supabaseAdmin = createAdminClient()\n\n  const updateData: any = {}\n  \n  // Map file types to profile fields\n  switch (fileType) {\n    case 'logo':\n      updateData.logo = fileUrl\n      break\n    case 'menu':\n      updateData.menu_url = fileUrl\n      break\n    case 'offer':\n      updateData.offer_image = fileUrl\n      break\n  }\n\n  const { data, error } = await supabaseAdmin\n    .from('profiles')\n    .update(updateData)\n    .eq('user_id', userId)\n    .select()\n    .single()\n\n  if (error) {\n    console.error('Error updating profile file:', error)\n    return { success: false, error: error.message }\n  }\n\n  // Revalidate the dashboard and files pages to show updated data\n  revalidatePath('/dashboard')\n  revalidatePath('/dashboard/files')\n\n  // Send Slack notification for knowledge base updates (non-blocking)\n  // Note: GHL sync temporarily disabled to prevent false signup notifications\n  sendBusinessUpdateNotification(data, 'file_upload', { fileType, fileUrl }).catch(error => \n    console.error('Slack notification failed (non-critical):', error)\n  )\n\n  return { success: true, data }\n}\n\nexport async function uploadToCloudinary(file: File, folder: string = 'qwikker_uploads') {\n  const formData = new FormData()\n  formData.append('file', file)\n  formData.append('upload_preset', 'unsigned_qwikker') // This preset must be created in Cloudinary\n  formData.append('folder', folder)\n\n  const url = `https://api.cloudinary.com/v1_1/dsh32kke7/${file.type.startsWith('image') ? 'image' : 'raw'}/upload`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: formData\n  })\n\n  if (!response.ok) {\n    throw new Error('Upload failed')\n  }\n\n  const data = await response.json()\n  \n  // Optional: Also backup to Supabase Storage for redundancy\n  // Note: This requires the userId to be passed, for now we'll skip the backup\n  // The backup can be implemented when we have access to the user context\n  try {\n    // await backupToSupabaseStorage(file, folder, data.public_id, userId)\n    console.log('Supabase backup skipped - requires user context')\n  } catch (error) {\n    console.warn('Supabase backup failed (non-critical):', error)\n  }\n  \n  return data.secure_url\n}\n\nasync function backupToSupabaseStorage(file: File, folder: string, publicId: string, userId: string) {\n  const supabaseAdmin = createAdminClient()\n  \n  // Create a user-specific folder structure for RLS compliance\n  const fileName = `${publicId}_${file.name}`\n  const filePath = `${userId}/${folder}/${fileName}`\n  \n  const { error } = await supabaseAdmin.storage\n    .from('business-files')\n    .upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    })\n  \n  if (error) {\n    throw error\n  }\n  \n  console.log(`File backed up to Supabase Storage: ${filePath}`)\n}\n\nasync function syncFileUpdateWithGHL(profileData: any, fileType: 'logo' | 'menu' | 'offer', fileUrl: string) {\n  // Prepare GHL data structure matching the onboarding form format\n  const ghlData = {\n    // Basic profile info\n    firstName: profileData.first_name || '',\n    lastName: profileData.last_name || '',\n    email: profileData.email || '',\n    phone: profileData.phone || '',\n    businessName: profileData.business_name || '',\n    businessType: profileData.business_type || '',\n    businessCategory: profileData.business_category || '',\n    town: profileData.business_town || '',\n    postcode: profileData.business_postcode || '',\n    \n    // File URLs - update the specific file that was uploaded\n    logo_url: fileType === 'logo' ? fileUrl : profileData.logo || '',\n    menuservice_url: fileType === 'menu' ? fileUrl : profileData.menu_url || '',\n    offer_image_url: fileType === 'offer' ? fileUrl : profileData.offer_image || '',\n    \n    // Offer data if available\n    offerName: profileData.offer_name || '',\n    offerType: profileData.offer_type || '',\n    offerValue: profileData.offer_value || '',\n    \n    // Additional context\n    updateType: 'file_upload',\n    updatedField: fileType,\n    updatedAt: new Date().toISOString()\n  }\n\n  // Send to GHL using the file update function (won't trigger signup notifications)\n  await sendFileUpdateToGoHighLevel(ghlData)\n}\n"],"names":[],"mappings":";;;;;;;IAMsB,oBAAA,WAAA,GAAA,IAAA,8WAAA,EAAA,8CAAA,mWAAA,EAAA,KAAA,GAAA,yWAAA,EAAA","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///Users/qwikker/qwikkerdashboard/lib/actions/file-actions.ts"],"sourcesContent":["'use server'\n\nimport { createAdminClient } from '@/lib/supabase/admin'\nimport { revalidatePath } from 'next/cache'\nimport { sendFileUpdateToGoHighLevel, sendBusinessUpdateNotification } from '@/lib/integrations'\n\nexport async function updateProfileFile(userId: string, fileType: 'logo' | 'menu' | 'offer', fileUrl: string) {\n  const supabaseAdmin = createAdminClient()\n\n  const updateData: any = {}\n  \n  // Map file types to profile fields\n  switch (fileType) {\n    case 'logo':\n      updateData.logo = fileUrl\n      break\n    case 'menu':\n      updateData.menu_url = fileUrl\n      break\n    case 'offer':\n      updateData.offer_image = fileUrl\n      break\n  }\n\n  const { data, error } = await supabaseAdmin\n    .from('profiles')\n    .update(updateData)\n    .eq('user_id', userId)\n    .select()\n    .single()\n\n  if (error) {\n    console.error('Error updating profile file:', error)\n    return { success: false, error: error.message }\n  }\n\n  // Revalidate the dashboard and files pages to show updated data\n  revalidatePath('/dashboard')\n  revalidatePath('/dashboard/files')\n\n  // Send Slack notification for knowledge base updates (non-blocking)\n  // Note: GHL sync temporarily disabled to prevent false signup notifications\n  sendBusinessUpdateNotification(data, 'file_upload', { fileType, fileUrl }).catch(error => \n    console.error('Slack notification failed (non-critical):', error)\n  )\n\n  return { success: true, data }\n}\n\nexport async function uploadToCloudinary(file: File, folder: string = 'qwikker_uploads') {\n  const formData = new FormData()\n  formData.append('file', file)\n  formData.append('upload_preset', 'unsigned_qwikker') // This preset must be created in Cloudinary\n  formData.append('folder', folder)\n\n  const url = `https://api.cloudinary.com/v1_1/dsh32kke7/${file.type.startsWith('image') ? 'image' : 'raw'}/upload`\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: formData\n  })\n\n  if (!response.ok) {\n    throw new Error('Upload failed')\n  }\n\n  const data = await response.json()\n  \n  // Optional: Also backup to Supabase Storage for redundancy\n  // Note: This requires the userId to be passed, for now we'll skip the backup\n  // The backup can be implemented when we have access to the user context\n  try {\n    // await backupToSupabaseStorage(file, folder, data.public_id, userId)\n    console.log('Supabase backup skipped - requires user context')\n  } catch (error) {\n    console.warn('Supabase backup failed (non-critical):', error)\n  }\n  \n  return data.secure_url\n}\n\nasync function backupToSupabaseStorage(file: File, folder: string, publicId: string, userId: string) {\n  const supabaseAdmin = createAdminClient()\n  \n  // Create a user-specific folder structure for RLS compliance\n  const fileName = `${publicId}_${file.name}`\n  const filePath = `${userId}/${folder}/${fileName}`\n  \n  const { error } = await supabaseAdmin.storage\n    .from('business-files')\n    .upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    })\n  \n  if (error) {\n    throw error\n  }\n  \n  console.log(`File backed up to Supabase Storage: ${filePath}`)\n}\n\nasync function syncFileUpdateWithGHL(profileData: any, fileType: 'logo' | 'menu' | 'offer', fileUrl: string) {\n  // Prepare GHL data structure matching the onboarding form format\n  const ghlData = {\n    // Basic profile info\n    firstName: profileData.first_name || '',\n    lastName: profileData.last_name || '',\n    email: profileData.email || '',\n    phone: profileData.phone || '',\n    businessName: profileData.business_name || '',\n    businessType: profileData.business_type || '',\n    businessCategory: profileData.business_category || '',\n    town: profileData.business_town || '',\n    postcode: profileData.business_postcode || '',\n    \n    // File URLs - update the specific file that was uploaded\n    logo_url: fileType === 'logo' ? fileUrl : profileData.logo || '',\n    menuservice_url: fileType === 'menu' ? fileUrl : profileData.menu_url || '',\n    offer_image_url: fileType === 'offer' ? fileUrl : profileData.offer_image || '',\n    \n    // Offer data if available\n    offerName: profileData.offer_name || '',\n    offerType: profileData.offer_type || '',\n    offerValue: profileData.offer_value || '',\n    \n    // Additional context\n    updateType: 'file_upload',\n    updatedField: fileType,\n    updatedAt: new Date().toISOString()\n  }\n\n  // Send to GHL using the file update function (won't trigger signup notifications)\n  await sendFileUpdateToGoHighLevel(ghlData)\n}\n"],"names":[],"mappings":";;;;;;;IAiDsB,qBAAA,WAAA,GAAA,IAAA,8WAAA,EAAA,8CAAA,mWAAA,EAAA,KAAA,GAAA,yWAAA,EAAA","debugId":null}}]
}